"""empty message

Revision ID: 6cc057923c6a
Revises:
Create Date: 2025-04-29 18:41:26.859496

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "6cc057923c6a"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "commodities",
        sa.Column("symbol", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("category", sa.Text(), nullable=True),
        sa.Column("is_mineable", sa.Boolean(), nullable=True),
        sa.Column("ring_types", sa.ARRAY(sa.Text()), nullable=True),
        sa.Column("mining_method", sa.Text(), nullable=True),
        sa.Column("has_hotspots", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("symbol"),
    )
    op.create_table(
        "factions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("allegiance", sa.Text(), nullable=True),
        sa.Column("government", sa.Text(), nullable=True),
        sa.Column("is_player", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "ship_modules",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("module_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("symbol", sa.Text(), nullable=True),
        sa.Column("category", sa.Text(), nullable=True),
        sa.Column("rating", sa.Text(), nullable=True),
        sa.Column("ship", sa.Text(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "ships",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("symbol", sa.Text(), nullable=True),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("ship_id", sa.Integer(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "systems",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("id64", sa.BigInteger(), nullable=True),
        sa.Column("spansh_id", sa.BigInteger(), nullable=True),
        sa.Column("edsm_id", sa.BigInteger(), nullable=True),
        sa.Column("x", sa.Float(), nullable=False),
        sa.Column("y", sa.Float(), nullable=False),
        sa.Column("z", sa.Float(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("allegiance", sa.Text(), nullable=True),
        sa.Column("population", sa.BigInteger(), nullable=True),
        sa.Column("primary_economy", sa.Text(), nullable=True),
        sa.Column("secondary_economy", sa.Text(), nullable=True),
        sa.Column("security", sa.Text(), nullable=True),
        sa.Column("government", sa.Text(), nullable=True),
        sa.Column("body_count", sa.Integer(), nullable=True),
        sa.Column("controlling_power", sa.Text(), nullable=True),
        sa.Column("power_conflict_progress", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("power_state", sa.Text(), nullable=True),
        sa.Column("power_state_control_progress", sa.Float(), nullable=True),
        sa.Column("power_state_reinforcement", sa.Float(), nullable=True),
        sa.Column("power_state_undermining", sa.Float(), nullable=True),
        sa.Column("powers", sa.ARRAY(sa.Text()), nullable=True),
        sa.Column("thargoid_war", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("controlling_power_updated_at", sa.DateTime(), nullable=True),
        sa.Column("power_state_updated_at", sa.DateTime(), nullable=True),
        sa.Column("powers_updated_at", sa.DateTime(), nullable=True),
        sa.Column("controlling_faction_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["controlling_faction_id"],
            ["factions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "bodies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("id64", sa.BigInteger(), nullable=True),
        sa.Column("spansh_id", sa.BigInteger(), nullable=True),
        sa.Column("edsm_id", sa.BigInteger(), nullable=True),
        sa.Column("body_id", sa.BigInteger(), nullable=True),
        sa.Column("system_id", sa.Integer(), nullable=False),
        sa.Column("atmosphere_composition", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("materials", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("parents", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("absolute_magnitude", sa.Float(), nullable=True),
        sa.Column("age", sa.Integer(), nullable=True),
        sa.Column("arg_of_periapsis", sa.Float(), nullable=True),
        sa.Column("ascending_Node", sa.Float(), nullable=True),
        sa.Column("atmosphere_type", sa.Text(), nullable=True),
        sa.Column("axial_tilt", sa.Float(), nullable=True),
        sa.Column("distance_to_arrival", sa.Float(), nullable=True),
        sa.Column("earth_masses", sa.Float(), nullable=True),
        sa.Column("gravity", sa.Float(), nullable=True),
        sa.Column("is_landable", sa.Boolean(), nullable=True),
        sa.Column("luminosity", sa.Text(), nullable=True),
        sa.Column("main_star", sa.Boolean(), nullable=True),
        sa.Column("mean_anomaly", sa.Float(), nullable=True),
        sa.Column("orbital_eccentricity", sa.Float(), nullable=True),
        sa.Column("orbital_inclination", sa.Float(), nullable=True),
        sa.Column("orbital_period", sa.Float(), nullable=True),
        sa.Column("radius", sa.Float(), nullable=True),
        sa.Column("reserve_level", sa.Text(), nullable=True),
        sa.Column("rotational_period", sa.Float(), nullable=True),
        sa.Column("rotational_period_tidally_locked", sa.Boolean(), nullable=True),
        sa.Column("semi_major_axis", sa.Float(), nullable=True),
        sa.Column("solar_masses", sa.Float(), nullable=True),
        sa.Column("solar_radius", sa.Float(), nullable=True),
        sa.Column("solid_composition", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("spectral_class", sa.Text(), nullable=True),
        sa.Column("sub_type", sa.Text(), nullable=True),
        sa.Column("surface_pressure", sa.Float(), nullable=True),
        sa.Column("surface_temperature", sa.Float(), nullable=True),
        sa.Column("terraforming_state", sa.Text(), nullable=True),
        sa.Column("type", sa.Text(), nullable=True),
        sa.Column("volcanism_type", sa.Text(), nullable=True),
        sa.Column("mean_anomaly_updated_at", sa.DateTime(), nullable=True),
        sa.Column("distance_to_arrival_updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["system_id"],
            ["systems.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "faction_presences",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("system_id", sa.Integer(), nullable=False),
        sa.Column("faction_id", sa.Integer(), nullable=False),
        sa.Column("influence", sa.Float(), nullable=True),
        sa.Column("state", sa.Text(), nullable=True),
        sa.Column("happiness", sa.Text(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("active_states", sa.ARRAY(sa.Text()), nullable=True),
        sa.Column("pending_states", sa.ARRAY(sa.Text()), nullable=True),
        sa.Column("recovering_states", sa.ARRAY(sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["faction_id"],
            ["factions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["system_id"],
            ["systems.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("system_id", "faction_id", name="_system_faction_presence_uc"),
    )
    op.create_table(
        "stations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("id64", sa.BigInteger(), nullable=True),
        sa.Column("spansh_id", sa.BigInteger(), nullable=True),
        sa.Column("edsm_id", sa.BigInteger(), nullable=True),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("system_id", sa.Integer(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("owner_type", sa.Text(), nullable=False),
        sa.Column("allegiance", sa.Text(), nullable=True),
        sa.Column("controlling_faction", sa.Text(), nullable=True),
        sa.Column("controlling_faction_state", sa.Text(), nullable=True),
        sa.Column("distance_to_arrival", sa.Float(), nullable=True),
        sa.Column("economies", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("government", sa.Text(), nullable=True),
        sa.Column("large_landing_pad", sa.Integer(), nullable=True),
        sa.Column("medium_landing_pad", sa.Integer(), nullable=True),
        sa.Column("small_landing_pad", sa.Integer(), nullable=True),
        sa.Column("primary_economy", sa.Text(), nullable=True),
        sa.Column("services", sa.ARRAY(sa.Text()), nullable=True),
        sa.Column("type", sa.Text(), nullable=True),
        sa.Column("carrier_name", sa.Text(), nullable=True),
        sa.Column("latitude", sa.Float(), nullable=True),
        sa.Column("longitude", sa.Float(), nullable=True),
        sa.Column("spansh_updated_at", sa.DateTime(), nullable=True),
        sa.Column("edsm_updated_at", sa.DateTime(), nullable=True),
        sa.Column("eddn_updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["system_id"],
            ["systems.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "market_commodities",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("station_id", sa.BigInteger(), nullable=False),
        sa.Column("commodity_sym", sa.Text(), nullable=False),
        sa.Column("buy_price", sa.Integer(), nullable=True),
        sa.Column("sell_price", sa.Integer(), nullable=True),
        sa.Column("stock", sa.BigInteger(), nullable=True),
        sa.Column("demand", sa.BigInteger(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("is_blacklisted", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["commodity_sym"],
            ["commodities.symbol"],
        ),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["stations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "outfitting_ship_modules",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("station_id", sa.BigInteger(), nullable=False),
        sa.Column("module_id", sa.BigInteger(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["module_id"],
            ["ship_modules.id"],
        ),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["stations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "rings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("body_id", sa.Integer(), nullable=False),
        sa.Column("id64", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("type", sa.Text(), nullable=True),
        sa.Column("mass", sa.Float(), nullable=True),
        sa.Column("inner_radius", sa.Float(), nullable=True),
        sa.Column("outer_radius", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["body_id"],
            ["bodies.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id64"),
    )
    op.create_table(
        "shipyard_ships",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("station_id", sa.BigInteger(), nullable=False),
        sa.Column("ship_id", sa.BigInteger(), nullable=False),
        sa.Column("buy_price", sa.Integer(), nullable=True),
        sa.Column("sell_price", sa.Integer(), nullable=True),
        sa.Column("stock", sa.BigInteger(), nullable=True),
        sa.Column("demand", sa.BigInteger(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("is_blacklisted", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["ship_id"],
            ["ships.id"],
        ),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["stations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "signals",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("body_id", sa.Integer(), nullable=False),
        sa.Column("signal_type", sa.Text(), nullable=True),
        sa.Column("count", sa.Integer(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["body_id"],
            ["bodies.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "hotspots",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("ring_id", sa.Integer(), nullable=False),
        sa.Column("commodity_sym", sa.Text(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["commodity_sym"],
            ["commodities.symbol"],
        ),
        sa.ForeignKeyConstraint(
            ["ring_id"],
            ["rings.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("hotspots")
    op.drop_table("signals")
    op.drop_table("shipyard_ships")
    op.drop_table("rings")
    op.drop_table("outfitting_ship_modules")
    op.drop_table("market_commodities")
    op.drop_table("stations")
    op.drop_table("faction_presences")
    op.drop_table("bodies")
    op.drop_table("systems")
    op.drop_table("ships")
    op.drop_table("ship_modules")
    op.drop_table("factions")
    op.drop_table("commodities")
    # ### end Alembic commands ###
